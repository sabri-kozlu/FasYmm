#pragma checksum "C:\Users\Sa\Desktop\WinUIFasYmmAppV1\WinUIFasYmmApp\ControlPages\SplitViewPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "E0DD253BF097BA03A81BFE7CB8D278216073A1B60BCE82FEDA1E6F7703249446"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WinUIFasYmmApp.ControlPages
{
    partial class SplitViewPage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_SplitView_IsPaneOpen(global::Microsoft.UI.Xaml.Controls.SplitView obj, global::System.Boolean value)
            {
                obj.IsPaneOpen = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_SplitView_OpenPaneLength(global::Microsoft.UI.Xaml.Controls.SplitView obj, global::System.Double value)
            {
                obj.OpenPaneLength = value;
            }
            public static void Set_WinUIFasYmmApp_ControlExampleSubstitution_Value(global::WinUIFasYmmApp.ControlExampleSubstitution obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Value = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_SplitView_CompactPaneLength(global::Microsoft.UI.Xaml.Controls.SplitView obj, global::System.Double value)
            {
                obj.CompactPaneLength = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Automation_AutomationProperties_Name(global::Microsoft.UI.Xaml.DependencyObject obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                global::Microsoft.UI.Xaml.Automation.AutomationProperties.SetName(obj, value);
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_SymbolIcon_Symbol(global::Microsoft.UI.Xaml.Controls.SymbolIcon obj, global::Microsoft.UI.Xaml.Controls.Symbol value)
            {
                obj.Symbol = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class SplitViewPage_obj3_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            ISplitViewPage_Bindings
        {
            private global::WinUIFasYmmApp.ControlPages.NavLink dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj3;
            private global::Microsoft.UI.Xaml.Controls.SymbolIcon obj4;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj5;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3NameDisabled = false;
            private static bool isobj4SymbolDisabled = false;
            private static bool isobj5TextDisabled = false;

            public SplitViewPage_obj3_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 9 && columnNumber == 67)
                {
                    isobj3NameDisabled = true;
                }
                else if (lineNumber == 10 && columnNumber == 29)
                {
                    isobj4SymbolDisabled = true;
                }
                else if (lineNumber == 11 && columnNumber == 28)
                {
                    isobj5TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // ControlPages\SplitViewPage.xaml line 9
                        this.obj3 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target));
                        break;
                    case 4: // ControlPages\SplitViewPage.xaml line 10
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.SymbolIcon>(target);
                        break;
                    case 5: // ControlPages\SplitViewPage.xaml line 11
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            var rootElement = (this.obj3.Target as global::Microsoft.UI.Xaml.Controls.StackPanel);
                            if (rootElement != null)
                            {
                                rootElement.DataContextChanged -= this.DataContextChangedHandler;
                            }
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_(global::WinRT.CastExtensions.As<global::WinUIFasYmmApp.ControlPages.NavLink>(item), 1 << phase);
            }

            public void Recycle()
            {
            }

            // ISplitViewPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::WinUIFasYmmApp.ControlPages.NavLink>(newDataRoot);
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::WinUIFasYmmApp.ControlPages.NavLink obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Label(obj.Label, phase);
                        this.Update_Symbol(obj.Symbol, phase);
                    }
                }
            }
            private void Update_Label(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // ControlPages\SplitViewPage.xaml line 9
                    if (!isobj3NameDisabled)
                    {
                        if ((this.obj3.Target as global::Microsoft.UI.Xaml.Controls.StackPanel) != null)
                        {
                            XamlBindingSetters.Set_Microsoft_UI_Xaml_Automation_AutomationProperties_Name((this.obj3.Target as global::Microsoft.UI.Xaml.Controls.StackPanel), obj, null);
                        }
                    }
                    // ControlPages\SplitViewPage.xaml line 11
                    if (!isobj5TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj, null);
                    }
                }
            }
            private void Update_Symbol(global::Microsoft.UI.Xaml.Controls.Symbol obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // ControlPages\SplitViewPage.xaml line 10
                    if (!isobj4SymbolDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_SymbolIcon_Symbol(this.obj4, obj);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class SplitViewPage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            ISplitViewPage_Bindings
        {
            private global::WinUIFasYmmApp.ControlPages.SplitViewPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Microsoft.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Microsoft.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.SplitView obj10;
            private global::Microsoft.UI.Xaml.Controls.ListView obj12;
            private global::WinUIFasYmmApp.ControlExampleSubstitution obj20;
            private global::WinUIFasYmmApp.ControlExampleSubstitution obj21;
            private global::WinUIFasYmmApp.ControlExampleSubstitution obj22;
            private global::WinUIFasYmmApp.ControlExampleSubstitution obj23;
            private global::WinUIFasYmmApp.ControlExampleSubstitution obj24;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj10IsPaneOpenDisabled = false;
            private static bool isobj10OpenPaneLengthDisabled = false;
            private static bool isobj10CompactPaneLengthDisabled = false;
            private static bool isobj12ItemsSourceDisabled = false;
            private static bool isobj20ValueDisabled = false;
            private static bool isobj21ValueDisabled = false;
            private static bool isobj22ValueDisabled = false;
            private static bool isobj23ValueDisabled = false;
            private static bool isobj24ValueDisabled = false;

            private SplitViewPage_obj1_BindingsTracking bindingsTracking;

            public SplitViewPage_obj1_Bindings()
            {
                this.bindingsTracking = new SplitViewPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 42 && columnNumber == 21)
                {
                    isobj10IsPaneOpenDisabled = true;
                }
                else if (lineNumber == 43 && columnNumber == 21)
                {
                    isobj10OpenPaneLengthDisabled = true;
                }
                else if (lineNumber == 44 && columnNumber == 21)
                {
                    isobj10CompactPaneLengthDisabled = true;
                }
                else if (lineNumber == 57 && columnNumber == 63)
                {
                    isobj12ItemsSourceDisabled = true;
                }
                else if (lineNumber == 140 && columnNumber == 72)
                {
                    isobj20ValueDisabled = true;
                }
                else if (lineNumber == 141 && columnNumber == 68)
                {
                    isobj21ValueDisabled = true;
                }
                else if (lineNumber == 142 && columnNumber == 72)
                {
                    isobj22ValueDisabled = true;
                }
                else if (lineNumber == 143 && columnNumber == 75)
                {
                    isobj23ValueDisabled = true;
                }
                else if (lineNumber == 144 && columnNumber == 69)
                {
                    isobj24ValueDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 10: // ControlPages\SplitViewPage.xaml line 40
                        this.obj10 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.SplitView>(target);
                        this.bindingsTracking.RegisterTwoWayListener_10(this.obj10);
                        break;
                    case 12: // ControlPages\SplitViewPage.xaml line 55
                        this.obj12 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        break;
                    case 20: // ControlPages\SplitViewPage.xaml line 140
                        this.obj20 = global::WinRT.CastExtensions.As<global::WinUIFasYmmApp.ControlExampleSubstitution>(target);
                        break;
                    case 21: // ControlPages\SplitViewPage.xaml line 141
                        this.obj21 = global::WinRT.CastExtensions.As<global::WinUIFasYmmApp.ControlExampleSubstitution>(target);
                        break;
                    case 22: // ControlPages\SplitViewPage.xaml line 142
                        this.obj22 = global::WinRT.CastExtensions.As<global::WinUIFasYmmApp.ControlExampleSubstitution>(target);
                        break;
                    case 23: // ControlPages\SplitViewPage.xaml line 143
                        this.obj23 = global::WinRT.CastExtensions.As<global::WinUIFasYmmApp.ControlExampleSubstitution>(target);
                        break;
                    case 24: // ControlPages\SplitViewPage.xaml line 144
                        this.obj24 = global::WinRT.CastExtensions.As<global::WinUIFasYmmApp.ControlExampleSubstitution>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ISplitViewPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::WinUIFasYmmApp.ControlPages.SplitViewPage>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Microsoft.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Microsoft.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Microsoft.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Microsoft.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Microsoft.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Microsoft.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::WinUIFasYmmApp.ControlPages.SplitViewPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_togglePaneButton(obj.togglePaneButton, phase);
                        this.Update_openPaneLengthSlider(obj.openPaneLengthSlider, phase);
                        this.Update_compactPaneLengthSlider(obj.compactPaneLengthSlider, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_NavLinks(obj.NavLinks, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_paneBackgroundCombobox(obj.paneBackgroundCombobox, phase);
                        this.Update_splitView(obj.splitView, phase);
                    }
                }
            }
            private void Update_togglePaneButton(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_togglePaneButton(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_togglePaneButton_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_togglePaneButton_IsChecked(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\SplitViewPage.xaml line 40
                    if (!isobj10IsPaneOpenDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_SplitView_IsPaneOpen(this.obj10, (global::System.Boolean)this.LookupConverter("nullableBooleanToBooleanConverter").Convert(obj, typeof(global::System.Boolean), null, null));
                    }
                }
            }
            private void Update_openPaneLengthSlider(global::Microsoft.UI.Xaml.Controls.Slider obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_openPaneLengthSlider(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_openPaneLengthSlider_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_openPaneLengthSlider_Value(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\SplitViewPage.xaml line 40
                    if (!isobj10OpenPaneLengthDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_SplitView_OpenPaneLength(this.obj10, obj);
                    }
                    // ControlPages\SplitViewPage.xaml line 142
                    if (!isobj22ValueDisabled)
                    {
                        XamlBindingSetters.Set_WinUIFasYmmApp_ControlExampleSubstitution_Value(this.obj22, obj, null);
                    }
                }
            }
            private void Update_compactPaneLengthSlider(global::Microsoft.UI.Xaml.Controls.Slider obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_compactPaneLengthSlider(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_compactPaneLengthSlider_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_compactPaneLengthSlider_Value(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\SplitViewPage.xaml line 40
                    if (!isobj10CompactPaneLengthDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_SplitView_CompactPaneLength(this.obj10, obj);
                    }
                    // ControlPages\SplitViewPage.xaml line 143
                    if (!isobj23ValueDisabled)
                    {
                        XamlBindingSetters.Set_WinUIFasYmmApp_ControlExampleSubstitution_Value(this.obj23, obj, null);
                    }
                }
            }
            private void Update_NavLinks(global::System.Collections.ObjectModel.ObservableCollection<global::WinUIFasYmmApp.ControlPages.NavLink> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // ControlPages\SplitViewPage.xaml line 55
                    if (!isobj12ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj12, obj, null);
                    }
                }
            }
            private void Update_paneBackgroundCombobox(global::Microsoft.UI.Xaml.Controls.ComboBox obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_paneBackgroundCombobox(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_paneBackgroundCombobox_SelectedItem(obj.SelectedItem, phase);
                    }
                }
            }
            private void Update_paneBackgroundCombobox_SelectedItem(global::System.Object obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem((global::Microsoft.UI.Xaml.Controls.ComboBoxItem)obj, phase);
                    }
                }
            }
            private void Update_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem(global::Microsoft.UI.Xaml.Controls.ComboBoxItem obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem_Tag(obj.Tag, phase);
                    }
                }
            }
            private void Update_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem_Tag(global::System.Object obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\SplitViewPage.xaml line 140
                    if (!isobj20ValueDisabled)
                    {
                        XamlBindingSetters.Set_WinUIFasYmmApp_ControlExampleSubstitution_Value(this.obj20, obj, null);
                    }
                }
            }
            private void Update_splitView(global::Microsoft.UI.Xaml.Controls.SplitView obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_splitView(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_splitView_IsPaneOpen(obj.IsPaneOpen, phase);
                        this.Update_splitView_DisplayMode(obj.DisplayMode, phase);
                    }
                }
            }
            private void Update_splitView_IsPaneOpen(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\SplitViewPage.xaml line 141
                    if (!isobj21ValueDisabled)
                    {
                        XamlBindingSetters.Set_WinUIFasYmmApp_ControlExampleSubstitution_Value(this.obj21, obj, null);
                    }
                }
            }
            private void Update_splitView_DisplayMode(global::Microsoft.UI.Xaml.Controls.SplitViewDisplayMode obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // ControlPages\SplitViewPage.xaml line 144
                    if (!isobj24ValueDisabled)
                    {
                        XamlBindingSetters.Set_WinUIFasYmmApp_ControlExampleSubstitution_Value(this.obj24, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_10_IsPaneOpen()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.togglePaneButton != null)
                        {
                            this.dataRoot.togglePaneButton.IsChecked = (global::System.Nullable<global::System.Boolean>)this.LookupConverter("nullableBooleanToBooleanConverter").ConvertBack(this.obj10.IsPaneOpen, typeof(global::System.Nullable<global::System.Boolean>), null, null);
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SplitViewPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<SplitViewPage_obj1_Bindings> weakRefToBindingObj; 

                public SplitViewPage_obj1_BindingsTracking(SplitViewPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SplitViewPage_obj1_Bindings>(obj);
                }

                public SplitViewPage_obj1_Bindings TryGetBindingObject()
                {
                    SplitViewPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_togglePaneButton(null);
                    UpdateChildListeners_openPaneLengthSlider(null);
                    UpdateChildListeners_compactPaneLengthSlider(null);
                    UpdateChildListeners_paneBackgroundCombobox(null);
                    UpdateChildListeners_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem(null);
                    UpdateChildListeners_splitView(null);
                }

                public void DependencyPropertyChanged_togglePaneButton_IsChecked(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    SplitViewPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton obj = sender as global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton;
                        if (obj != null)
                        {
                            bindings.Update_togglePaneButton_IsChecked(obj.IsChecked, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton cache_togglePaneButton = null;
                private long tokenDPC_togglePaneButton_IsChecked = 0;
                public void UpdateChildListeners_togglePaneButton(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton obj)
                {
                    if (obj != cache_togglePaneButton)
                    {
                        if (cache_togglePaneButton != null)
                        {
                            cache_togglePaneButton.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, tokenDPC_togglePaneButton_IsChecked);
                            cache_togglePaneButton = null;
                        }
                        if (obj != null)
                        {
                            cache_togglePaneButton = obj;
                            tokenDPC_togglePaneButton_IsChecked = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, DependencyPropertyChanged_togglePaneButton_IsChecked);
                        }
                    }
                }
                public void DependencyPropertyChanged_openPaneLengthSlider_Value(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    SplitViewPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.Slider obj = sender as global::Microsoft.UI.Xaml.Controls.Slider;
                        if (obj != null)
                        {
                            bindings.Update_openPaneLengthSlider_Value(obj.Value, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.Slider cache_openPaneLengthSlider = null;
                private long tokenDPC_openPaneLengthSlider_Value = 0;
                public void UpdateChildListeners_openPaneLengthSlider(global::Microsoft.UI.Xaml.Controls.Slider obj)
                {
                    if (obj != cache_openPaneLengthSlider)
                    {
                        if (cache_openPaneLengthSlider != null)
                        {
                            cache_openPaneLengthSlider.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase.ValueProperty, tokenDPC_openPaneLengthSlider_Value);
                            cache_openPaneLengthSlider = null;
                        }
                        if (obj != null)
                        {
                            cache_openPaneLengthSlider = obj;
                            tokenDPC_openPaneLengthSlider_Value = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase.ValueProperty, DependencyPropertyChanged_openPaneLengthSlider_Value);
                        }
                    }
                }
                public void DependencyPropertyChanged_compactPaneLengthSlider_Value(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    SplitViewPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.Slider obj = sender as global::Microsoft.UI.Xaml.Controls.Slider;
                        if (obj != null)
                        {
                            bindings.Update_compactPaneLengthSlider_Value(obj.Value, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.Slider cache_compactPaneLengthSlider = null;
                private long tokenDPC_compactPaneLengthSlider_Value = 0;
                public void UpdateChildListeners_compactPaneLengthSlider(global::Microsoft.UI.Xaml.Controls.Slider obj)
                {
                    if (obj != cache_compactPaneLengthSlider)
                    {
                        if (cache_compactPaneLengthSlider != null)
                        {
                            cache_compactPaneLengthSlider.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase.ValueProperty, tokenDPC_compactPaneLengthSlider_Value);
                            cache_compactPaneLengthSlider = null;
                        }
                        if (obj != null)
                        {
                            cache_compactPaneLengthSlider = obj;
                            tokenDPC_compactPaneLengthSlider_Value = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase.ValueProperty, DependencyPropertyChanged_compactPaneLengthSlider_Value);
                        }
                    }
                }
                public void DependencyPropertyChanged_paneBackgroundCombobox_SelectedItem(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    SplitViewPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.ComboBox obj = sender as global::Microsoft.UI.Xaml.Controls.ComboBox;
                        if (obj != null)
                        {
                            bindings.Update_paneBackgroundCombobox_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.ComboBox cache_paneBackgroundCombobox = null;
                private long tokenDPC_paneBackgroundCombobox_SelectedItem = 0;
                public void UpdateChildListeners_paneBackgroundCombobox(global::Microsoft.UI.Xaml.Controls.ComboBox obj)
                {
                    if (obj != cache_paneBackgroundCombobox)
                    {
                        if (cache_paneBackgroundCombobox != null)
                        {
                            cache_paneBackgroundCombobox.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, tokenDPC_paneBackgroundCombobox_SelectedItem);
                            cache_paneBackgroundCombobox = null;
                        }
                        if (obj != null)
                        {
                            cache_paneBackgroundCombobox = obj;
                            tokenDPC_paneBackgroundCombobox_SelectedItem = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, DependencyPropertyChanged_paneBackgroundCombobox_SelectedItem);
                        }
                    }
                }
                public void DependencyPropertyChanged_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem_Tag(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    SplitViewPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.ComboBoxItem obj = sender as global::Microsoft.UI.Xaml.Controls.ComboBoxItem;
                        if (obj != null)
                        {
                            bindings.Update_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem_Tag(obj.Tag, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.ComboBoxItem cache_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem = null;
                private long tokenDPC_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem_Tag = 0;
                public void UpdateChildListeners_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem(global::Microsoft.UI.Xaml.Controls.ComboBoxItem obj)
                {
                    if (obj != cache_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem)
                    {
                        if (cache_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem != null)
                        {
                            cache_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.FrameworkElement.TagProperty, tokenDPC_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem_Tag);
                            cache_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem = null;
                        }
                        if (obj != null)
                        {
                            cache_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem = obj;
                            tokenDPC_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem_Tag = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.FrameworkElement.TagProperty, DependencyPropertyChanged_paneBackgroundCombobox_SelectedItem_Cast_SelectedItem_To_ComboBoxItem_Tag);
                        }
                    }
                }
                public void DependencyPropertyChanged_splitView_IsPaneOpen(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    SplitViewPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.SplitView obj = sender as global::Microsoft.UI.Xaml.Controls.SplitView;
                        if (obj != null)
                        {
                            bindings.Update_splitView_IsPaneOpen(obj.IsPaneOpen, DATA_CHANGED);
                        }
                    }
                }
                public void DependencyPropertyChanged_splitView_DisplayMode(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    SplitViewPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.SplitView obj = sender as global::Microsoft.UI.Xaml.Controls.SplitView;
                        if (obj != null)
                        {
                            bindings.Update_splitView_DisplayMode(obj.DisplayMode, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.SplitView cache_splitView = null;
                private long tokenDPC_splitView_IsPaneOpen = 0;
                private long tokenDPC_splitView_DisplayMode = 0;
                public void UpdateChildListeners_splitView(global::Microsoft.UI.Xaml.Controls.SplitView obj)
                {
                    if (obj != cache_splitView)
                    {
                        if (cache_splitView != null)
                        {
                            cache_splitView.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.SplitView.IsPaneOpenProperty, tokenDPC_splitView_IsPaneOpen);
                            cache_splitView.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.SplitView.DisplayModeProperty, tokenDPC_splitView_DisplayMode);
                            cache_splitView = null;
                        }
                        if (obj != null)
                        {
                            cache_splitView = obj;
                            tokenDPC_splitView_IsPaneOpen = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.SplitView.IsPaneOpenProperty, DependencyPropertyChanged_splitView_IsPaneOpen);
                            tokenDPC_splitView_DisplayMode = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.SplitView.DisplayModeProperty, DependencyPropertyChanged_splitView_DisplayMode);
                        }
                    }
                }
                public void RegisterTwoWayListener_10(global::Microsoft.UI.Xaml.Controls.SplitView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.SplitView.IsPaneOpenProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_10_IsPaneOpen();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 6: // ControlPages\SplitViewPage.xaml line 19
                {
                    this.SystemControlBackgroundChromeMediumLowBrush = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.VisualState>(target);
                }
                break;
            case 7: // ControlPages\SplitViewPage.xaml line 20
                {
                    this.Red = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.VisualState>(target);
                }
                break;
            case 8: // ControlPages\SplitViewPage.xaml line 25
                {
                    this.Blue = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.VisualState>(target);
                }
                break;
            case 9: // ControlPages\SplitViewPage.xaml line 30
                {
                    this.Green = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.VisualState>(target);
                }
                break;
            case 10: // ControlPages\SplitViewPage.xaml line 40
                {
                    this.splitView = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.SplitView>(target);
                }
                break;
            case 11: // ControlPages\SplitViewPage.xaml line 53
                {
                    this.PaneHeader = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 12: // ControlPages\SplitViewPage.xaml line 55
                {
                    this.NavLinksList = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ListView)this.NavLinksList).ItemClick += this.NavLinksList_ItemClick;
                }
                break;
            case 13: // ControlPages\SplitViewPage.xaml line 69
                {
                    this.content = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 14: // ControlPages\SplitViewPage.xaml line 77
                {
                    this.togglePaneButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>(target);
                }
                break;
            case 15: // ControlPages\SplitViewPage.xaml line 79
                {
                    global::Microsoft.UI.Xaml.Controls.ToggleSwitch element15 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleSwitch>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ToggleSwitch)element15).Toggled += this.PanePlacement_Toggled;
                }
                break;
            case 16: // ControlPages\SplitViewPage.xaml line 82
                {
                    this.displayModeCombobox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.displayModeCombobox).SelectionChanged += this.displayModeCombobox_SelectionChanged;
                }
                break;
            case 17: // ControlPages\SplitViewPage.xaml line 90
                {
                    this.paneBackgroundCombobox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.paneBackgroundCombobox).SelectionChanged += this.paneBackgroundCombobox_SelectionChanged;
                }
                break;
            case 18: // ControlPages\SplitViewPage.xaml line 98
                {
                    this.openPaneLengthSlider = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Slider>(target);
                }
                break;
            case 19: // ControlPages\SplitViewPage.xaml line 101
                {
                    this.compactPaneLengthSlider = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Slider>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }


        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // ControlPages\SplitViewPage.xaml line 1
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    SplitViewPage_obj1_Bindings bindings = new SplitViewPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 3: // ControlPages\SplitViewPage.xaml line 9
                {                    
                    global::Microsoft.UI.Xaml.Controls.StackPanel element3 = (global::Microsoft.UI.Xaml.Controls.StackPanel)target;
                    SplitViewPage_obj3_Bindings bindings = new SplitViewPage_obj3_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element3.DataContext);
                    element3.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element3, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element3, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

