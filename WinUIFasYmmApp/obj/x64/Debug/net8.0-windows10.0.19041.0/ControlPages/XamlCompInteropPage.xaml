<Page x:ConnectionId='1'
    x:Class="WinUIFasYmmApp.ControlPages.XamlCompInteropPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:WinUIFasYmmApp"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <StackPanel>
        <local:ControlExample x:ConnectionId='2' HeaderText="Use a natural motion composition animation on a UIElement"                                       CSharpSource="Motion/AnimationInterop/AnimationInteropSample1_cs.txt">
            <StackPanel VerticalAlignment="Stretch">
                <TextBlock Text="Hover over the button to animate its scale." Style="{ThemeResource BodyTextBlockStyle}" Margin="0,0,0,12"  />
                <Button x:ConnectionId='19' Content="Item" Width="100" Height="50"                                                                               />
            </StackPanel>

            <local:ControlExample.Options>
                <StackPanel>
                    <RadioButtons x:ConnectionId='20' x:Name="DampingStackPanel" Header="Damping Ratio">
                        <RadioButton Content="0.2" />
                        <RadioButton Content="0.4" />
                        <RadioButton Content="0.6" IsChecked="True" />
                        <RadioButton Content="0.8" />
                    </RadioButtons>
                    <Slider x:ConnectionId='21' x:Name="PeriodSlider" Header="Period (in ms)" Minimum="25" Maximum="200" TickFrequency="25" Value="50" StepFrequency="25" />
                </StackPanel>
            </local:ControlExample.Options>
        </local:ControlExample>

        <local:ControlExample x:ConnectionId='3' HeaderText="ExpressionAnimation on an Ellipse element"                                  XamlSource="Motion/AnimationInterop/AnimationInteropSample2_xaml.txt" CSharpSource="Motion/AnimationInterop/AnimationInteropSample2_cs.txt">
            <StackPanel Height="200">
                <TextBlock Text="Hover over the square to animate its scale. Notice that the ellipse also animates." Style="{ThemeResource BodyTextBlockStyle}"   />
                <TextBlock Text="The scale of the circle is inversely related to the scale of the square." Margin="0,0,0,12" />
                <Grid VerticalAlignment="Top">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Rectangle x:ConnectionId='17' x:Name="rectangle" Width="50" Height="50" Fill="{ThemeResource SystemAccentColor}"                                                                               />
                    <Ellipse x:ConnectionId='18' x:Name="ellipse" Grid.Column="1" Width="50" Height="50" Margin="55,0" Fill="{ThemeResource SystemAccentColor}"/>
                </Grid>
            </StackPanel>
        </local:ControlExample>

        <local:ControlExample x:ConnectionId='4' HeaderText="Driving several related animations together using ExpressionAnimation"                                       CSharpSource="Motion/AnimationInterop/AnimationInteropSample3_cs.txt">
            <StackPanel Margin="0,0,0,50">
                <TextBlock Text="Hover over any button to animate its scale. Notice that the other buttons move out of the way." Style="{ThemeResource BodyTextBlockStyle}"  />
                <TextBlock Text="Each button animates as a function of the previous button's scale and translation." Margin="0,0,0,12" />
                <Button x:ConnectionId='13' x:Name="ExpressionButton1" Content="Item 1" Width="100" Height="50" Margin="5"                                                                                />
                <Button x:ConnectionId='14' x:Name="ExpressionButton2" Content="Item 2" Width="100" Height="50" Margin="5"                                                                               />
                <Button x:ConnectionId='15' x:Name="ExpressionButton3" Content="Item 3" Width="100" Height="50" Margin="5"                                                                               />
                <Button x:ConnectionId='16' x:Name="ExpressionButton4" Content="Item 4" Width="100" Height="50" Margin="5"                                                                               />
            </StackPanel>
        </local:ControlExample>

        <local:ControlExample x:ConnectionId='5' HeaderText="Reference ActualSize in ExpressionAnimations to make novel layouts based on size"                                   CSharpSource="Motion/AnimationInterop/AnimationInteropSample4_cs.txt">
            <local:ControlExample.Options>
                <Slider x:ConnectionId='11' Header="Change radius" Minimum="200" Maximum="400"                                          MinWidth="150" />
            </local:ControlExample.Options>
            <Grid x:ConnectionId='12' x:Name="LayoutPanel" Width="200" Height="200" Margin="12" />
        </local:ControlExample>

        <local:ControlExample x:ConnectionId='6' HeaderText="Reference ActualOffset and ActualSize in ExpressionAnimations to position elements relative to each other"                                     XamlSource="Motion/AnimationInterop/AnimationInteropSample5_xaml.txt" CSharpSource="Motion/AnimationInterop/AnimationInteropSample5_cs.txt">
            <local:ControlExample.Options>
                <StackPanel MinWidth="150">
                    <Slider x:ConnectionId='7' x:Name="FontSizeSlider" Header="Change font size" Minimum="12" Maximum="24" />
                    <Slider x:ConnectionId='8' x:Name="MarginSlider" Header="Change text margin" Minimum="0" Maximum="100" />
                </StackPanel>
            </local:ControlExample.Options>
            <StackPanel>
                <TextBlock Text="This sample positions a popup relative to a block of text that has variable layout size based on font size. Use the sliders to move and resize the text." TextWrapping="WrapWholeWords" Style="{ThemeResource BodyTextBlockStyle}"/>
                <Grid HorizontalAlignment="Left" Margin="0,12,0,0">
                    <TextBlock x:ConnectionId='9' x:Name="PopupTarget" 
                               Width="300" 
                               TextWrapping="WrapWholeWords" 
                                                                                                                                        
                                                                                     
                               Text="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum." />

                    <!-- Notice that the popup is a sibling to the target, not an ancestor. -->
                    <Popup x:ConnectionId='10' x:Name="Popup" Margin="5">
                        <Grid MinWidth="50" MaxWidth="200" MinHeight="50" BorderBrush="{ThemeResource SystemControlForegroundChromeGrayBrush}" BorderThickness="2" Background="{ThemeResource FlyoutBackgroundThemeBrush}">
                            <TextBlock Text="I am always right aligned center to the target." TextWrapping="WrapWholeWords" Margin="6" Style="{ThemeResource CaptionTextBlockStyle}" VerticalAlignment="Center" />
                        </Grid>
                    </Popup>
                </Grid>
            </StackPanel>
        </local:ControlExample>
    </StackPanel>
</Page>

